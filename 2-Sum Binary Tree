/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int Solution::t2Sum(TreeNode* A, int B) 
{
    if(A==NULL)
    {
        return 0;
    }
    stack<TreeNode*>s1;
    stack<TreeNode*>s2;
    TreeNode*pleft=A;
    TreeNode*pright=A;
    int check=A->val;
    while((!s1.empty() && !s2.empty()) || pleft || pright)
    {
        while(pleft)
       {
           s1.push(pleft);
           pleft=pleft->left;
       }
       while(pright)
       {
           s2.push(pright);
           pright=pright->right;
       }
       int temp1=s1.top()->val;
       int temp2=s2.top()->val;
       if(temp1==temp2 || temp1==temp2==check)
       {
           s1.pop();
           s2.pop();
       }
       else if(temp1+temp2==B)
       {
           return 1;
       }
       else if(temp1+temp2<B)
       {
           TreeNode*new_s1=s1.top();
           s1.pop();
               pleft=new_s1->right;
           
       }
      else if(temp1+temp2>B)
       {
           TreeNode*new_s2=s2.top();
           s2.pop();
               pright=new_s2->left;
       } 
    }
    return 0;
}
